/* Parameters for DMSmap running in Aquila-GIS
 *
 *
 */

params {
    pipelineVersion     = '0.0.1' // Pipeline version
    //run Info -- Need input from command laine
    params.sampleinfo = false
    params.designinfo = false
    params.runName = false
    params.outdir = false
    //params.readsPath = false

    // genome directory
    params.genomeDir="/mnt/projects/wenm/rnaStructure/ming/database/Genome/Ensembl/Human/GRCh38/release-100"
    

    // cluster settings -- usually fixed
    max_memory = 1024.GB
    max_cpus = 120
    max_time = 240.h

    // reads trim:
    // trim 2, 5, and 7 nt from the 5′ end of each read for TGIRT-, SSII–Mn2+-, and NexteraXT-generated libraries, respectively
    params.trim_length = 2 
    params.SSII_trim_length = 5
    // adaptor trim:
    // params.adp1 = 'AGATCGGAAGAGCAC'
    // params.adp2 = 'CTACAGTCCGACGATC'
    params.adp1 = 'AGATCGGAAGAGC'
    params.adp2 = 'CTACAGTCCGACGA'
    // barcodes total length in icShape library: DDDNNATCACGNNNN-AGATCGGAAGAGCGTCGTGGA/iSp18/GGATCC...
    params.trimLength = 15 
    params.minLength = 25
  
    params.nextera_adp1 = 'CTGTCTCTTATACACATCT'
    params.nextera_adp2 = 'AGATGTGTATAAGAGACAG'
    params.primer_g = 'AAGCAGTGGTATCAACGCAGAGTACATGGG'
    params.primer_a= 'GTACTCTGCGTTGATACCAGTGCTT'
    params.primer_G = 'AAGCAGTGGTATCAACGCAGAGTACATGGG'
    params.primer_A = 'GTACTCTGCGTTGATACCAGTGCTT' 

    // mapping with Bowtie2
    params.mismatch = 1 // allow 5 mismatch 
    params.tryTimes = 15
    params.seedLength = 22
    params.genome = "/mnt/projects/wenm/rnaStructure/ming/database/icSHAPE/transcriptome_longest/transcriptome.fas"
    // params.genome_original = "/mnt/projects/wenm/rnaStructure/ming/database/Transcriptome/GENCODE/v36/longestTxn/gencode.v36.longestCDS.fa"
    params.genomeType = "LongestCDS"

    //coverage count
    params.num_hit = 5
    params.cov_min = 40 
    params.genomesize = '/mnt/projects/wenm/rnaStructure/ming/database/icSHAPE/transcriptome_longest/transcriptome.fas.size.csv'
    // /mnt/projects/wenm/rnaStructure/ming/database/Transcriptome/GENCODE/v36/longestTxn/gencode.v36.longestCDS.fa.chrsize'
    // /mnt/projects/wenm/rnaStructure/ming/database/Genome/Ensembl/Human/GRCh38/release-98/longest_cds_transcriptome/Homo_sapiens.GRCh38.98.coding_ncRNA_longestCDS_transcript.chrsize'
    
    // calculate RPKM
    
    // adaptor trim for icShape-pipe:
    params.LeadTrim = 15
    params.minLength = 25
    params.adaptor_fa = 'TruSeq2-PE.fa'   // under ${baseDir}/reference/    
}

process {
    executor = 'sge'
    clusterOptions = { ' -V ' }
    // clusterOptions = "-l mem_free=${memory.toString().replaceAll(/[\sB]/,'')}"
    penv = 'OpenMP'
    // errorStrategy = { task.attempt < 2 ? 'retry' : 'finish' }
    pollInterval = '30 sec'
    exitReadTimeout = "120 sec"

    cpus = 1
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }

    errorStrategy = { task.exitStatus in [140,143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'

    // Process-specific resource requirements
    withName:trim_adaptor {
        time = { check_max( 2.h * task.attempt, 'time') }
        cpus = { check_max(4, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
    }
      withName:trim_reads {
        time = { check_max( 4.h * task.attempt, 'time') }
        cpus = { check_max(4, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
    }
    withName:collapse_reads {
        time = { check_max( 2.h * task.attempt, 'time') }
        cpus = { check_max(4, 'cpus') }
        memory = { check_max( 16.GB * task.attempt, 'memory') }
    }
    withName:bowtie2_mappings {
        time = { check_max( 12.h * task.attempt, 'time') }
        cpus = { check_max(8, 'cpus') }
        memory = { check_max( 32.GB * task.attempt, 'memory') }
    }
    withName:estimate_rpkm {
        time = { check_max( 8.h * task.attempt, 'time') }
        cpus = { check_max( 8, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }
    withName:merge_bam{ 
        time = { check_max( 8.h * task.attempt, 'time') }
        cpus = { check_max( 8, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }
    withName:mutation_calling {
        time = { check_max( 120.h * task.attempt, 'time') }
        cpus = { check_max( 8, 'cpus') }
        memory = { check_max( 16.GB * task.attempt, 'memory') }
    }
    withName:normalize {
        time = { check_max( 8.h * task.attempt, 'time') }
        cpus = { check_max( 8, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }

}

// process.shell = ['/bin/bash', '-euo', 'pipefail']
process.shell = ['/bin/bash','-u']

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

